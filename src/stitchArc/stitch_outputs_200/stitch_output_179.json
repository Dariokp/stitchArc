{
    "cmd": "/home/dlindberg/.conda/envs/arcProjectEnv/bin/python run_stitch.py",
    "args": {
        "iterations": 1,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 178,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 4,
            "threads": 18,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": false,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": false,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": false,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": false,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 4226022,
    "final_cost": 4223592,
    "compression_ratio": 1.0005753396634902,
    "num_abstractions": 1,
    "original": "(lam (lam ((lam ((lam ((lam ((lam ((lam (fn_26 $4 c2 c1 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_18 $65 $66 $0)) (fn_66 $5 $1 8 $65))) (backdrop (fn_80 (fn_6 (min $15 $13)) (fn_6 $21) (__tuple__ (fn_12 $18) (fn_12 (max $16 $14))))))) (paint $63 $2))) (fn_60 $25 $24))) (shift $0 $1))) (__tuple__ $2 $1))) (fn_37 $19 $21))) (fn_37 $19 $21))) (asobject $1))) (fill $0 c2 $3))) (fill $45 c1 $3))) (fn_60 $15 $14))) (backdrop (fn_80 $2 (fn_6 $14) (__tuple__ $10 $3))))) (backdrop (fn_80 $3 $6 (fn_50 $4))))) (fn_168 $4 (fn_6 $11)))) (fn_151 $3 randint))) (fn_168 $2 (fn_6 $9)))) (fn_151 $1 randint))) (fn_61 (fn_48 $7)))) (getItem $2 $1))) (fn_57 (fn_6 (len $1)) $10 $11))) (getItemWithStep (getItemUpTo $0 (fn_6 $2)) 0 -1 -1))) (getItem $21 $1))) (fn_56 (fn_6 $3) $7 $8))) (fn_63 $2)))) (fn_109 $2 $5 $6))) (fn_109 $2 $4 $5))) (fn_107 $3 $4))) (fn_107 $2 $3))) (fn_81 8))))",
    "rewritten": "(lam (lam ((lam ((lam ((lam ((lam ((lam (fn_26 $4 c2 c1 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_18 $65 $66 $0)) (fn_66 $5 $1 8 $65))) (backdrop (fn_80 (fn_6 (min $15 $13)) (fn_6 $21) (__tuple__ (fn_12 $18) (fn_12 (max $16 $14))))))) (paint $63 $2))) (fn_60 $25 $24))) (shift $0 $1))) (__tuple__ $2 $1))) (fn_37 $19 $21))) (fn_37 $19 $21))) (asobject $1))) (fill $0 c2 $3))) (fill $45 c1 $3))) (fn_60 $15 $14))) (backdrop (fn_80 $2 (fn_6 $14) (__tuple__ $10 $3))))) (backdrop (fn_80 $3 $6 (fn_50 $4))))) (fn_168 $4 (fn_6 $11)))) (fn_151 $3 randint))) (fn_168 $2 (fn_6 $9)))) (fn_151 $1 randint))) (fn_61 (fn_48 $7)))) (getItem $2 $1))) (fn_57 (fn_6 (len $1)) $10 $11))) (getItemWithStep (getItemUpTo $0 (fn_6 $2)) 0 -1 -1))) (getItem $21 $1))) (fn_56 (fn_6 $3) $7 $8))) (fn_63 $2)))) (fn_109 $2 $5 $6))) (fn_109 $2 $4 $5))) (fn_107 $3 $4))) (fn_107 $2 $3))) (fn_81 8))))",
    "rewritten_dreamcoder": null,
    "abstractions": [
        {
            "body": "(lam (fn_54 #2 #3 bgc (fn_28 bgc #2 #1 #0)))",
            "dreamcoder": "#(lambda (lambda (lambda (lambda (lambda (fn_54 $2 $1 bgc (fn_28 bgc $2 $3 $4)))))))",
            "arity": 4,
            "name": "fn_178",
            "utility": 2021,
            "final_cost": 4223592,
            "compression_ratio": 1.0005753396634902,
            "cumulative_compression_ratio": 1.0005753396634902,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": {
                "fn_178 (lam (fn_53 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $87 $86 (fn_136 (fn_1 $87 $86) (fn_35 x50 $1 $0 x45 $89) $0 x44 $88 $85)))) fn_82)) fn_31)) (fn_97 $84 $2))) (fn_97 $82 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $26 $27))) (ofcolor $80 bgc))) (fill $79 3 $4))) (fn_97 $78 $2))) (fn_97 $76 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $74 $9))) (fill $73 3 $9))) (fn_134 $71 $7))) (fill $70 3 $7))) (fn_45 (fn_64 $10 $8) (fn_118 $9) $7))) (fn_55 $6 $7 (add $7 $9)))) (fn_45 $6 $5 (fn_64 $9 $7)))) (__tuple__ $4 (add $5 $7)))) (__tuple__ (fn_6 $3) $4))) (fn_132 (fn_64 $5 $3) (__tuple__ (fn_12 $4)) (__tuple__ $4) __set__))) (__set__ (__tuple__ (fn_64 $5 $3) $2) (__tuple__ (fn_48 (add $3 $5)) $2)))) (randint (fn_118 $2) (fn_159 (add $2 $4))))) (fn_61 (fn_102 $2 $4)))) (fn_61 (fn_102 $2 $4)))) (fn_109 (fn_48 $2) $5 $6))) (fn_4 (fn_48 $2) 5 $4 $5)) ((lam ((lam ((lam ((lam (fn_132 (randint $1 (fn_159 (add $1 $3))) (lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $176 $175 (fn_136 (fn_1 $176 $175) (fn_35 x138 $1 $0 x133 $178) $0 x132 $177 $174)))) fn_82)) fn_31)) (fn_97 $173 $2))) (fn_97 $171 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $27 $28))) (ofcolor $169 bgc))) (fill $168 3 $4))) (fn_97 $167 $2))) (fn_97 $165 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $163 $9))) (fill $162 3 $9))) (fn_134 $160 $7))) (fill $159 3 $7))) (fn_55 (fn_64 $12 $10) (fn_118 $8) (add $9 $11)))) (fn_45 (fn_64 $10 $8) (fn_64 $11 $9) $9))) (fn_55 $8 (fn_118 $5) (add $7 $9)))) (__tuple__ (add $7 $9) (fn_64 $8 $6)))) (__tuple__ $6 (add $5 $7)))) (fn_32 (fn_12 $3) (__tuple__ (fn_64 $7 $5)) $3 __set__))) (fn_32 (fn_12 $1) (__tuple__ $4) $1 __set__))) $2)) (lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $134 $133 (fn_136 (fn_1 $134 $133) (fn_35 x96 $1 $0 x91 $136) $0 x90 $135 $132)))) fn_82)) fn_31)) (fn_97 $131 $2))) (fn_97 $129 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $27 $28))) (ofcolor $127 bgc))) (fill $126 3 $4))) (fn_97 $125 $2))) (fn_97 $123 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $121 $9))) (fill $120 3 $9))) (fn_134 $118 $7))) (fill $117 3 $7))) (fn_55 (fn_64 $12 $10) (fn_118 $7) (add $9 $11)))) (fn_45 (fn_64 $10 $8) (fn_64 $11 $9) $9))) (fn_55 $8 (fn_118 $6) (add $7 $9)))) (__tuple__ (add $7 $9) (fn_64 $8 $6)))) (__tuple__ $6 (add $5 $7)))) (fn_32 (fn_12 $2) (__tuple__ (fn_64 $7 $5)) $2 __set__))) (fn_32 (fn_12 $2) (__tuple__ $4) $2 __set__))) $2)) fn_53)) (fn_61 (fn_102 $2 $4)))) (fn_61 (fn_102 $2 $4)))) (fn_109 (fn_48 $2) $5 $6))) (fn_109 (fn_48 $2) $4 $5)))) $0 $1 fgc": "(lam (fn_54 $2 fgc bgc (fn_28 bgc $2 $1 (lam (fn_53 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $88 $87 (fn_136 (fn_1 $88 $87) (fn_35 x50 $1 $0 x45 $90) $0 x44 $89 $86)))) fn_82)) fn_31)) (fn_97 $85 $2))) (fn_97 $83 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $27 $28))) (ofcolor $81 bgc))) (fill $80 3 $4))) (fn_97 $79 $2))) (fn_97 $77 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $75 $9))) (fill $74 3 $9))) (fn_134 $72 $7))) (fill $71 3 $7))) (fn_45 (fn_64 $10 $8) (fn_118 $9) $7))) (fn_55 $6 $7 (add $7 $9)))) (fn_45 $6 $5 (fn_64 $9 $7)))) (__tuple__ $4 (add $5 $7)))) (__tuple__ (fn_6 $3) $4))) (fn_132 (fn_64 $5 $3) (__tuple__ (fn_12 $4)) (__tuple__ $4) __set__))) (__set__ (__tuple__ (fn_64 $5 $3) $2) (__tuple__ (fn_48 (add $3 $5)) $2)))) (randint (fn_118 $2) (fn_159 (add $2 $4))))) (fn_61 (fn_102 $2 $5)))) (fn_61 (fn_102 $2 $5)))) (fn_109 (fn_48 $3) $6 $7))) (fn_4 (fn_48 $3) 5 $5 $6)) ((lam ((lam ((lam ((lam (fn_132 (randint $1 (fn_159 (add $1 $3))) (lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $177 $176 (fn_136 (fn_1 $177 $176) (fn_35 x138 $1 $0 x133 $179) $0 x132 $178 $175)))) fn_82)) fn_31)) (fn_97 $174 $2))) (fn_97 $172 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $28 $29))) (ofcolor $170 bgc))) (fill $169 3 $4))) (fn_97 $168 $2))) (fn_97 $166 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $164 $9))) (fill $163 3 $9))) (fn_134 $161 $7))) (fill $160 3 $7))) (fn_55 (fn_64 $12 $10) (fn_118 $8) (add $9 $11)))) (fn_45 (fn_64 $10 $8) (fn_64 $11 $9) $9))) (fn_55 $8 (fn_118 $5) (add $7 $9)))) (__tuple__ (add $7 $9) (fn_64 $8 $6)))) (__tuple__ $6 (add $5 $7)))) (fn_32 (fn_12 $3) (__tuple__ (fn_64 $7 $5)) $3 __set__))) (fn_32 (fn_12 $1) (__tuple__ $4) $1 __set__))) $2)) (lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_176 $1 $2 $0 (fn_0 $135 $134 (fn_136 (fn_1 $135 $134) (fn_35 x96 $1 $0 x91 $137) $0 x90 $136 $133)))) fn_82)) fn_31)) (fn_97 $132 $2))) (fn_97 $130 $1))) (fn_83 $2 $1))) (fn_57 (fn_30 (len $1)) $28 $29))) (ofcolor $128 bgc))) (fill $127 3 $4))) (fn_97 $126 $2))) (fn_97 $124 $1))) (__set__ $10 $9))) (bitOr (bitOr $7 $6) $5))) (fn_134 $122 $9))) (fill $121 3 $9))) (fn_134 $119 $7))) (fill $118 3 $7))) (fn_55 (fn_64 $12 $10) (fn_118 $7) (add $9 $11)))) (fn_45 (fn_64 $10 $8) (fn_64 $11 $9) $9))) (fn_55 $8 (fn_118 $6) (add $7 $9)))) (__tuple__ (add $7 $9) (fn_64 $8 $6)))) (__tuple__ $6 (add $5 $7)))) (fn_32 (fn_12 $2) (__tuple__ (fn_64 $7 $5)) $2 __set__))) (fn_32 (fn_12 $2) (__tuple__ $4) $2 __set__))) $2)) fn_53)) (fn_61 (fn_102 $2 $5)))) (fn_61 (fn_102 $2 $5)))) (fn_109 (fn_48 $3) $6 $7))) (fn_109 (fn_48 $3) $5 $6)))))))"
            },
            "dc_comparison_millis": null
        }
    ]
}