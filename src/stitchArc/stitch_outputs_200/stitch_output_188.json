{
    "cmd": "/home/dlindberg/.conda/envs/arcProjectEnv/bin/python run_stitch.py",
    "args": {
        "iterations": 1,
        "abstraction_prefix": "fn_",
        "previous_abstractions": 187,
        "shuffle": false,
        "truncate": null,
        "no_opt": false,
        "silent": true,
        "verbose_rewrite": false,
        "step": {
            "max_arity": 4,
            "threads": 18,
            "no_stats": false,
            "batch": 1,
            "dynamic_batch": false,
            "eta_long": false,
            "no_curried_metavars": false,
            "no_curried_bodies": false,
            "inv_candidates": 1,
            "hole_choice": "DepthFirst",
            "cost": {
                "cost_lam": 1,
                "cost_app": 1,
                "cost_var": 100,
                "cost_ivar": 100,
                "cost_prim_default": 100
            },
            "no_mismatch_check": false,
            "follow": null,
            "follow_prune": false,
            "verbose_worklist": false,
            "verbose_best": false,
            "print_stats": 0,
            "show_rewritten": false,
            "rewritten_dreamcoder": false,
            "rewritten_intermediates": false,
            "inv_arg_cap": false,
            "allow_single_task": false,
            "no_opt_single_use": false,
            "no_opt_upper_bound": false,
            "no_opt_force_multiuse": false,
            "no_opt_useless_abstract": false,
            "no_opt_arity_zero": false,
            "no_other_util": false,
            "structure_penalty": 1.0,
            "rewrite_check": false,
            "utility_by_rewrite": false,
            "dreamcoder_comparison": false,
            "quiet": true,
            "fused_lambda_tags": {
                "tags": null
            }
        }
    },
    "original_cost": 4205200,
    "final_cost": 4202752,
    "compression_ratio": 1.0005824754827313,
    "num_abstractions": 1,
    "original": "(lam (lam ((lam ((lam ((lam ((lam ((lam (fn_26 $4 c2 c1 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_18 $65 $66 $0)) (fn_66 $5 $1 8 $65))) (backdrop (fn_185 $21 (min $15 $13) fn_80 (__tuple__ (fn_12 $18) (fn_12 (max $16 $14))))))) (paint $63 $2))) (fn_60 $25 $24))) (shift $0 $1))) (__tuple__ $2 $1))) (fn_37 $19 $21))) (fn_37 $19 $21))) (asobject $1))) (fill $0 c2 $3))) (fill $45 c1 $3))) (fn_60 $15 $14))) (backdrop (fn_80 $2 (fn_6 $14) (__tuple__ $10 $3))))) (backdrop (fn_80 $3 $6 (fn_50 $4))))) (fn_168 $4 (fn_6 $11)))) (fn_151 $3 randint))) (fn_168 $2 (fn_6 $9)))) (fn_151 $1 randint))) (fn_61 (fn_48 $7)))) (getItem $2 $1))) (fn_57 (fn_6 (len $1)) $10 $11))) (getItemWithStep (getItemUpTo $0 (fn_6 $2)) 0 -1 -1))) (getItem $21 $1))) (fn_56 (fn_6 $3) $7 $8))) (fn_63 $2)))) (fn_109 $2 $5 $6))) (fn_109 $2 $4 $5))) (fn_107 $3 $4))) (fn_107 $2 $3))) (fn_81 8))))",
    "rewritten": "(lam (lam ((lam ((lam ((lam ((lam ((lam (fn_26 $4 c2 c1 ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_18 $65 $66 $0)) (fn_66 $5 $1 8 $65))) (backdrop (fn_185 $21 (min $15 $13) fn_80 (__tuple__ (fn_12 $18) (fn_12 (max $16 $14))))))) (paint $63 $2))) (fn_60 $25 $24))) (shift $0 $1))) (__tuple__ $2 $1))) (fn_37 $19 $21))) (fn_37 $19 $21))) (asobject $1))) (fill $0 c2 $3))) (fill $45 c1 $3))) (fn_60 $15 $14))) (backdrop (fn_80 $2 (fn_6 $14) (__tuple__ $10 $3))))) (backdrop (fn_80 $3 $6 (fn_50 $4))))) (fn_168 $4 (fn_6 $11)))) (fn_151 $3 randint))) (fn_168 $2 (fn_6 $9)))) (fn_151 $1 randint))) (fn_61 (fn_48 $7)))) (getItem $2 $1))) (fn_57 (fn_6 (len $1)) $10 $11))) (getItemWithStep (getItemUpTo $0 (fn_6 $2)) 0 -1 -1))) (getItem $21 $1))) (fn_56 (fn_6 $3) $7 $8))) (fn_63 $2)))) (fn_109 $2 $5 $6))) (fn_109 $2 $4 $5))) (fn_107 $3 $4))) (fn_107 $2 $3))) (fn_81 8))))",
    "rewritten_dreamcoder": null,
    "abstractions": [
        {
            "body": "(lam (lam (lam (lam (fn_93 (#1 $3 $2 $1 $0) #0)))))",
            "dreamcoder": "#(lambda (lambda (lambda (lambda (lambda (lambda (fn_93 ($4 $3 $2 $1 $0) $5)))))))",
            "arity": 2,
            "name": "fn_187",
            "utility": 1938,
            "final_cost": 4202752,
            "compression_ratio": 1.0005824754827313,
            "cumulative_compression_ratio": 1.0005824754827313,
            "num_uses": 6,
            "rewritten": null,
            "rewritten_dreamcoder": null,
            "uses": {
                "fn_187 (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (ifElse True ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_173 (fn_170 x84 (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (fn_122 $21 $1 $24 $2 ((lam ((lam ((lam ((lam (fn_53 ((lam ((lam ((lam (fn_158 $2 $0 (fn_0 $189 $229 (fn_69 x115 (lam (lam (lam (lam (fn_20 $4 $3 ((lam ((lam (fn_22 $0 ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x132 $217) ((lam (fn_129 $0 $19 $20 ((lam (fn_96 $1 (lam ((lam (fn_73 $37 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $23 $13 $22 $6 $12 $26 $25 $3 $1 $27 $14)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $45) $1)) (x85 $2 $225 $227 $1 $20 $10 $19 $3 $9 $23 $22 $0 $226 $24 $11))) (shift $3 $1))) (x85 $0 $36 $35 $34 $18 $8 $17 $1 $7 $21 $20 $26 $25 $22 $9) $0)) (fn_44 $21 $49 $20 $48 $225)))) (normalize $0)))))) x131 $213 $212))) (set $213))) (fn_132 (outbox (outbox $212)) outbox (bitOr (outbox $212)) bitOr))) (fn_57 (add $13 $12) $71 $72)) ((lam ((lam (x116 $0 $210 $1 $2)) (next $7 $8))) (remove (fn_33 $1) $0)))) (sfilter $218 (lam (eq (len (bitAnd (dneighbors $0) $219)) 1))))) $218) ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x157 $240) ((lam (fn_129 $0 $17 $18 ((lam (fn_96 $1 (lam ((lam (fn_73 $225 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $21 $13 $20 $6 $12 $24 $23 $3 $1 $25 $207)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $43) $1)) (x85 $2 $248 $250 $1 $18 $10 $17 $3 $9 $21 $20 $0 $249 $22 $204))) (shift $3 $1))) (x85 $0 $221 $223 $219 $16 $8 $15 $1 $7 $19 $18 $220 $222 $20 $202) $0)) (fn_44 $19 $47 $18 $46 $248)))) (normalize $0)))))) x156 $236 $235))) (set $236))) (fn_132 (outbox (outbox $235)) outbox (bitOr (outbox $235)) bitOr))) (fn_57 (add $11 $10) $69 $70))))))) $213 $227)))) (remove (fn_33 (sub $228 (corners $228))) $228))) (sub (len $227) $1))) (fn_56 (fn_6 (len $226)) $61 $62)) ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x179 $254) ((lam (fn_129 $0 $9 $10 ((lam (fn_96 $1 (lam ((lam (fn_73 $242 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $182 $13 $183 $6 $12 $16 $15 $3 $1 $17 $199)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $35) $1)) (x85 $2 $262 $264 $1 $179 $10 $180 $3 $9 $13 $12 $0 $263 $14 $196))) (shift $3 $1))) (x85 $0 $238 $240 $236 $177 $8 $178 $1 $7 $11 $10 $237 $239 $12 $194) $0)) (fn_44 $11 $39 $10 $38 $262)))) (normalize $0)))))) x178 $250 $249))) (set $250))) (fn_132 (outbox (outbox $249)) outbox (bitOr (outbox $249)) bitOr))) (fn_57 (add $3 $2) $61 $62)))) (box (fn_185 $2 $1 fn_80 fn_124)))) (fn_138 6))) (fn_138 6))) (fn_12 $0)) ((lam ((lam ((lam (fn_104 0 (len $0) ((lam (fn_42 $251 (fill $252 8 $1))) (mfilter (sub $3 $2) (rbind adjacent $1))) (x32 $23 $1 $247 $250 $258 $29 $252 $248 $24 $167 $27 $232 $168 $246 $233 $2 $0 $164 $165 $249 $22 $257 $251 $163 $28 $184))) (mfilter $1 (compose flip (rbind bordering $250))))) (colorfilter $1 $22))) (fn_150 $248))))))))))))))))))) $228 $231) $233 $229 $148 $213 $149 $227 $214 $145 $146 $230 $165 $232 $144)) (asindices $230))) (fn_13 $7 $8 $2))) (remove $1 $36))) (choice $35))) (mul 10 $3))) 0)) 0)) (fn_74 16 $1 $2 $32 $33))) (fn_58 $31 $32))) (fn_58 $30 $31)) (fn_1 $228 $220))))))))))))))))))))))))))))) x31": "(lam (lam (lam (lam (fn_93 (x31 $3 $2 $1 $0) (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (ifElse True ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam ((lam (fn_173 (fn_170 x84 (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (lam (fn_122 $21 $1 $24 $2 ((lam ((lam ((lam ((lam (fn_53 ((lam ((lam ((lam (fn_158 $2 $0 (fn_0 $193 $233 (fn_69 x115 (lam (lam (lam (lam (fn_20 $4 $3 ((lam ((lam (fn_22 $0 ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x132 $221) ((lam (fn_129 $0 $19 $20 ((lam (fn_96 $1 (lam ((lam (fn_73 $37 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $23 $13 $22 $6 $12 $26 $25 $3 $1 $27 $14)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $45) $1)) (x85 $2 $229 $231 $1 $20 $10 $19 $3 $9 $23 $22 $0 $230 $24 $11))) (shift $3 $1))) (x85 $0 $36 $35 $34 $18 $8 $17 $1 $7 $21 $20 $26 $25 $22 $9) $0)) (fn_44 $21 $49 $20 $48 $229)))) (normalize $0)))))) x131 $217 $216))) (set $217))) (fn_132 (outbox (outbox $216)) outbox (bitOr (outbox $216)) bitOr))) (fn_57 (add $13 $12) $75 $76)) ((lam ((lam (x116 $0 $214 $1 $2)) (next $7 $8))) (remove (fn_33 $1) $0)))) (sfilter $222 (lam (eq (len (bitAnd (dneighbors $0) $223)) 1))))) $222) ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x157 $244) ((lam (fn_129 $0 $17 $18 ((lam (fn_96 $1 (lam ((lam (fn_73 $229 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $21 $13 $20 $6 $12 $24 $23 $3 $1 $25 $211)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $43) $1)) (x85 $2 $252 $254 $1 $18 $10 $17 $3 $9 $21 $20 $0 $253 $22 $208))) (shift $3 $1))) (x85 $0 $225 $227 $223 $16 $8 $15 $1 $7 $19 $18 $224 $226 $20 $206) $0)) (fn_44 $19 $47 $18 $46 $252)))) (normalize $0)))))) x156 $240 $239))) (set $240))) (fn_132 (outbox (outbox $239)) outbox (bitOr (outbox $239)) bitOr))) (fn_57 (add $11 $10) $73 $74))))))) $217 $231)))) (remove (fn_33 (sub $232 (corners $232))) $232))) (sub (len $231) $1))) (fn_56 (fn_6 (len $230)) $65 $66)) ((lam ((lam ((lam (fn_77 $3 $0 (fn_38 (lam (lam (lam (fn_20 $3 $1 (fn_142 (bitAnd (sub $5 $4) (bitAnd (mapply dneighbors $4) $5)) $4 $3 x179 $258) ((lam (fn_129 $0 $9 $10 ((lam (fn_96 $1 (lam ((lam (fn_73 $246 $0 ((lam ((lam ((lam (x85 $5 $2 $0 $4 $186 $13 $187 $6 $12 $16 $15 $3 $1 $17 $203)) (fn_181 $3 $0))) (fn_12 $0))) (fill $0 (choice $35) $1)) (x85 $2 $266 $268 $1 $183 $10 $184 $3 $9 $13 $12 $0 $267 $14 $200))) (shift $3 $1))) (x85 $0 $242 $244 $240 $181 $8 $182 $1 $7 $11 $10 $241 $243 $12 $198) $0)) (fn_44 $11 $39 $10 $38 $266)))) (normalize $0)))))) x178 $254 $253))) (set $254))) (fn_132 (outbox (outbox $253)) outbox (bitOr (outbox $253)) bitOr))) (fn_57 (add $3 $2) $65 $66)))) (box (fn_185 $2 $1 fn_80 fn_124)))) (fn_138 6))) (fn_138 6))) (fn_12 $0)) ((lam ((lam ((lam (fn_104 0 (len $0) ((lam (fn_42 $255 (fill $256 8 $1))) (mfilter (sub $3 $2) (rbind adjacent $1))) (x32 $23 $1 $251 $254 $262 $29 $256 $252 $24 $171 $27 $236 $172 $250 $237 $2 $0 $168 $169 $253 $22 $261 $255 $167 $28 $188))) (mfilter $1 (compose flip (rbind bordering $254))))) (colorfilter $1 $22))) (fn_150 $252))))))))))))))))))) $232 $235) $237 $233 $152 $217 $153 $231 $218 $149 $150 $234 $169 $236 $148)) (asindices $234))) (fn_13 $7 $8 $2))) (remove $1 $40))) (choice $39))) (mul 10 $3))) 0)) 0)) (fn_74 16 $1 $2 $36 $37))) (fn_58 $35 $36))) (fn_58 $34 $35)) (fn_1 $232 $224))))))))))))))))))))))))))))))))))"
            },
            "dc_comparison_millis": null
        }
    ]
}